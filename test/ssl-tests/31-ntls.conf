# Generated with generate_ssl_tests.pl

num_tests = 5

test-0 = 0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only
test-1 = 1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only
test-2 = 2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode
test-3 = 3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode
test-4 = 4-test ntls client doing handshake without setting certs and pkey
# ===========================================================

[0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only]
ssl_conf = 0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-ssl

[0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-ssl]
server = 0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-server
client = 0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-client

[0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/SE.cert.pem
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/SE.key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/SS.cert.pem
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/SS.key.pem

[0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-client]
CipherString = ECC-SM2-SM4-CBC-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/CA.cert.pem
VerifyMode = Peer

[test-0]
ExpectedCipher = ECC-SM2-SM4-CBC-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only]
ssl_conf = 1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-ssl

[1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-ssl]
server = 1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-server
client = 1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-client

[1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/SE.cert.pem
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/SE.key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/SS.cert.pem
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/SS.key.pem

[1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-client]
CipherString = ECC-SM2-SM4-GCM-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/CA.cert.pem
VerifyMode = Peer

[test-1]
ExpectedCipher = ECC-SM2-SM4-GCM-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode]
ssl_conf = 2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-ssl

[2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-ssl]
server = 2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-server
client = 2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-client

[2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/SE.cert.pem
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/SE.key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/SS.cert.pem
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/SS.key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/CA.cert.pem

[2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-client]
CipherString = ECDHE-SM2-SM4-CBC-SM3
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/CE.cert.pem
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/CE.key.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/CS.cert.pem
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/CS.key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/CA.cert.pem
VerifyMode = Peer

[test-2]
ExpectedCipher = ECDHE-SM2-SM4-CBC-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode]
ssl_conf = 3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-ssl

[3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-ssl]
server = 3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-server
client = 3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-client

[3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/SE.cert.pem
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/SE.key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/SS.cert.pem
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/SS.key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/CA.cert.pem

[3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-client]
CipherString = ECDHE-SM2-SM4-GCM-SM3
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/CE.cert.pem
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/CE.key.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/CS.cert.pem
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/CS.key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/CA.cert.pem
VerifyMode = Peer

[test-3]
ExpectedCipher = ECDHE-SM2-SM4-GCM-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[4-test ntls client doing handshake without setting certs and pkey]
ssl_conf = 4-test ntls client doing handshake without setting certs and pkey-ssl

[4-test ntls client doing handshake without setting certs and pkey-ssl]
server = 4-test ntls client doing handshake without setting certs and pkey-server
client = 4-test ntls client doing handshake without setting certs and pkey-client

[4-test ntls client doing handshake without setting certs and pkey-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[4-test ntls client doing handshake without setting certs and pkey-client]
CipherString = ECC-SM2-SM4-CBC-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-4]
ExpectedResult = ServerFail
Method = NTLS


